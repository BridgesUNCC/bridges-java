apply plugin: 'java'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


// It turns out that sourceCompatibility and targetCompatibility are not enough to make the jar file actually cocmpatible.
// adding "--release 8" as a javac flags help.
//tasks.withType(JavaCompile) {
//    options.compilerArgs.addAll(['--release 8'])
//}

apply plugin: 'groovy' // groovy -> scripting -> working scalatests
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

///
/// General
///
group = "edu.uncc.cs.bridges"
version = "3.1.0b1"


///
/// Artifacts and deployment
///

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

// Ignore the drivers
sourceSets {
 
//			exclude 'edu/uncc/cs/bridgesdrivers/**'
//			exclude 'edu/uncc/cs/bridges/bridgesV2/**'
//			exclude 'src/main/test/**'
	main  {
		java {
	
		}
        }
}
//	test {
//		java {
//			include '**'
//		}
//	}


test {
  // enable TestNG support (default is JUnit)
  useJUnit()

  // set a system property for the test JVM(s)
  //systemProperty 'some.prop', 'value'

  // explicitly include or exclude tests
  include 'edu/**'
  scanForTestClasses = true

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  //minHeapSize = "128m"
  //maxHeapSize = "512m"

  // set JVM arguments for the test JVM(s)
  //jvmArgs '-XX:MaxPermSize=256m'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Bridges Jar File',
            'Implementation-Version': version
    }
    baseName = project.name
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it)}}
    with jar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://$projectDir/releases"

            pom.project {
               name 'Bridges Curriculum Social Network Client'
               packaging 'jar'
               description 'Explore and visualize social network follower graphs and user status streams with a lightweight facade API. (Client)'
               url 'http://github.com/SeanTater/bridges'

               scm {
                   url 'scm:git@github.com:SeanTater/bridges.git'
                   connection 'scm:git@github.com:SeanTater/bridges.git'
                   developerConnection 'scm:git@github.com:SeanTater/bridges.git'
               }

               licenses {
                   license {
                       name 'GNU General Public Licence, Version 2.0'
                       url 'http://www.gnu.org/licenses/gpl-2.0.htm'
                       distribution 'repo'
                   }
               }

               developers {
                   developer {
                       id 'SeanTater'
                       name 'Sean Gallagher'
                   }
                   developer {
                       id 'stevemacn'
                       name 'Stephen MacNeil'
                   }
                   developer {
                       id 'Dismembered'
                       name 'Michael Vitulli'
                   }
                   developer {
                       id 'mmehedin'
                       name 'Mihai Mehedint'
                   }
               }
           }
        }
    }
}

///
/// Repositories and dependencies
///

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// 	In this section you declare the dependencies for your production and
//	test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.apache.httpcomponents:fluent-hc:4.3.1'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.google.guava:guava:16+'
//	compile 'com.github.scala-incubator.io:scala-io-file_2.10:0.4.2'
//	compile 'com.github.nscala-time:nscala-time_2.10:0.6.0'
	// Declare the dependency for your favourite test framework you want
	// to use in your tests.
	// TestNG is also supported by the Gradle Test task. Just change the
	// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
	// testCompile "junit:junit:4.11"
  compile 'io.socket:socket.io-client:1.0.0'
}
